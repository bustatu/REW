<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

///Sa nu se suprapuna
if(instance_count&gt;1){instance_destroy();}

///Joystick existent
joystick=false;

///Fix
draw_texture_flush();

///Axe de control
axe_sd=0;///Stanga-Dreapta
axe_sj=0;///Sus-Jos
deadzone=0.01;///Orientarea minima pentru miscare de la 0 la 1
button_1=0;
button_3=0;///Butonul de atac
button_4=0;///Harta
button_6=0;///O arma in fata
button_7=0;///O arma in spate
button_9=0;///Butonul pentru debug
button_10=0;///Butonul de iesire


///Pentru meniu
selected[0]=5;
for(var i=1;i&lt;=selected[0];i++){selected[i]=0;}
selected[1]=1;

///Delay
delay=0;
delay1=0;

///Debug
debug=false;

ini_open("settings.ini");
///Setari de grafica
fullscreen=ini_read_real("Settings","Fullscreen",0);
lfullscreen=!fullscreen;
vsync=ini_read_real("Settings","Vsync",0);
///Tipul de controale 0-WASD 1-sageti
controls=ini_read_real("Settings","ControlType",0);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if(delay&lt;=8){delay++;}
else {delay=0;}

if(delay1&lt;=12){delay1++;}
else {delay1=0;}

///Verifica joystick-ul
if(joystick_exists(1)&amp;&amp;!joystick){
 show_debug_message("Joystick connected!");
 joystick=!joystick;
}
else if(!joystick_exists(1)&amp;&amp;joystick){
 show_debug_message("Joystick disconnected!");
 joystick=!joystick;
}

///Verifica controalele pentru joystick
if(joystick){
 axe_sd=joystick_xpos(1);
 axe_sj=joystick_ypos(1);
 button_1=joystick_check_button(1,1);
 button_3=joystick_check_button(1,3);
 button_4=joystick_check_button(1,4);
 button_6=joystick_check_button(1,6);
 button_7=joystick_check_button(1,7);
 button_9=joystick_check_button(1,9);
 button_10=joystick_check_button(1,10);
 ///Pentru meniu se va folosi si delay-ul din Create
}
///Pentru tastatura
else {
 ///Tipul de controale
 if(controls==0){///WASD
  axe_sd=keyboard_check(ord('D'))-keyboard_check(ord('A'));
  axe_sj=keyboard_check(ord('S'))-keyboard_check(ord('W'));
 }
 else {///Sageti
  axe_sd=keyboard_check(vk_right)-keyboard_check(vk_left);
  axe_sj=keyboard_check(vk_down)-keyboard_check(vk_up);
 }
 button_1=keyboard_check(vk_shift);
 button_3=keyboard_check(vk_space);
 button_4=keyboard_check(ord('M'));
 button_6=keyboard_check(ord('Q'));
 button_7=keyboard_check(ord('E'));
 button_9=keyboard_check(vk_f3);
 button_10=keyboard_check(vk_escape);
}

///Vizibilitatea (invizibil daca nu e in debug)
if(room_get_name(room)=="menu"){
 
 ///Du-te la debug
 if(button_10&amp;&amp;!delay){room_goto(room_debug);}
 
 ///Verifica daca ma duc jos sau sus
 if((axe_sj&lt;-deadzone)&amp;&amp;!delay){menu_go_up(0);}
 else if((axe_sj&gt;deadzone)&amp;&amp;!delay){menu_go_down(0);}
 
 ///Executa comanda de la meniu
 if(button_3&amp;&amp;!delay){
  var poz=1;
  ///Cauta unul
  while(poz&lt;=selected[0]&amp;&amp;selected[poz]!=1){poz++;}
  execute_menu_command(poz,0);
 }
}
else if(room_get_name(room)=="room_debug"){
 ///Seteaza orientarea sagetii
 if((axe_sd&gt;deadzone||axe_sd&lt;-deadzone)||(axe_sj&gt;deadzone||axe_sj&lt;-deadzone)){
  image_angle=point_direction(x,y,x+axe_sd,y+axe_sj);
 }
 ///Iesire daca este apasat butonul
 if(button_10){room_goto(menu);}
}
else if(room_get_name(room)=="options"){
 ///Du-te la meniu
 if(button_10){room_goto(menu);}
}

///Setarile de grafica
if(instance_exists(obj_optionsmanager)){
 fullscreen=obj_optionsmanager.fullscreen;
 vsync=obj_optionsmanager.vsync;
}

///Debug
if(button_9&amp;&amp;!delay){debug=!debug;}

//show_debug_message(string(button_10));
if(lfullscreen!=fullscreen){window_set_fullscreen(fullscreen);lfullscreen=fullscreen;display_reset(0,vsync)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pentru debug
if(debug){
 draw_set_color(make_color_rgb(0,255,0));
 draw_text(480,430,"FPS: "+string(floor(fps)));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

///Press Start 2 Play font
draw_set_font(ps2p);

///Doar pentru meniu (se ocupa de interfata)
if(room_get_name(room)=="menu"){
 draw_menu_string(350,70,"REW",5,5,-1,0);
 draw_menu_string(30,160,"START",2.5,2.5,1,0);
 draw_menu_string(30,220,"ENDLESS",2.5,2.5,2,0);
 draw_menu_string(30,280,"OPTIONS",2.5,2.5,3,0);
 draw_menu_string(30,340,"HELP",2.5,2.5,4,0);
 draw_menu_string(30,400,"EXIT",2.5,2.5,5,0);
}

///Scrie controlul daca e in camera de debug
else if(room_get_name(room)=="room_debug"){

 ///Scris alb
 draw_set_color(make_color_rgb(255,255,255));
 
 ///Informatii despre controale
 draw_text(5,5,"X: "+string(axe_sd));
 draw_text(5,35,"Y: "+string(axe_sj));
 draw_text(5,65,"DZ: "+string(deadzone));

 ///Daca butonul nu este apasat -&gt; rosu
 ///Altfel -&gt; verde
 ///Se face la fel pentru fiecare
 if(button_3){draw_set_color(make_color_rgb(0,255,0));}
 else {draw_set_color(make_color_rgb(255,0,0));}

 ///Controalele (la fel pentru fiecare)
 if(joystick){draw_text(5,95,"Button 3");}
 else {draw_text(5,95,"Space");}

 if(button_9){draw_set_color(make_color_rgb(0,255,0));}
 else {draw_set_color(make_color_rgb(255,0,0));}

 if(joystick){draw_text(5,125,"Button 9");}
 else {draw_text(5,125,"F3");} 

 if(button_1){draw_set_color(make_color_rgb(0,255,0));}
 else {draw_set_color(make_color_rgb(255,0,0));}

 if(joystick){draw_text(5,155,"Button 1");}
 else {draw_text(5,155,"Shift");} 

 if(button_4){draw_set_color(make_color_rgb(0,255,0));}
 else {draw_set_color(make_color_rgb(255,0,0));}

 if(joystick){draw_text(5,185,"Button 4");}
 else {draw_text(5,185,"M");}  
 
 ///Seteaza culoare aleatoare
 draw_set_color(make_color_rgb(random(255),random(255),random(255)));
 draw_text(475,5,"DEBUG MENU");

 ///Scris alb
 draw_set_color(make_color_rgb(255,255,255));

 ///Numele joystickului / tastatura daca nu exista
 if(joystick){draw_text(5,450,"Name: "+joystick_name(0));}
 else {draw_text(5,450,"Name: Keyboard");}

 ///Deseneaza imaginea
 draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>21,10</point>
    <point>21,21</point>
  </PhysicsShapePoints>
</object>
